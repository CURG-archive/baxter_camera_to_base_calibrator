





def get_error(checkerboard_to_wrist_estimate, camera_in_body_estimate, checkerboard_in_camera_trans, wrist_in_body_trans):
    total_error = 0
    for checkerboard_in_camera, wrist_in_body in zip(checkerboard_in_camera_trans, wrist_in_body_trans):
        checkboard_in_body = checkerboard_to_wrist_estimate * wrist_in_body_trans
        error = checkerboard_in_camera - checkerboard_to_wrist_estimate
        total_error += sum(sum(fabs(error)))
    return total_error

def get_total_error(parameters, checkerboard_in_camera_trans, wrist_in_body_tras):    
    arm_to_fiducial = parameters[:,:4]
    kinect_to_base = parameters[:,4:]
    error_norm = get_error(arm_to_fiducial, kinect_to_base, input_kinect_points, input_end_effector_location)
    return sqrt(error_norm)


def get_transform_lists(bag_file_name):
    broad_caster = tf.tfBroadcaster()
    listener = tf.tfListener()
    checkerboard_in_camera_trans = []
    wrist_in_body_trans = []

    camera_in_body_estimate = None
    checkerboard_to_wrist_estimate = None
    rosbag.Bag(bag_file_name)
    for topic, message in rosbag.bag(topics='/tf'):
        broad_caster.broadcast(message)
        for tf_message in message.transforms:
            if tf_message.header.frame_id == '/wrist_board' or tf_message.child_frame_id == '/wrist_board':
                if camera_in_body_estimate is None:
                    camera_in_body_tf = listener.lookupTransform('/camera_link','/world',rospy.Time(0))
                    camera_in_body_estimate = tf.transformations.toMatrix(tf.transformations.fromTF(camera_in_body_tf))

                if checkerboard_to_wrist_estimate == None:
                    checkerboard_to_wrist_tf = checkerboard_tf = listener.lookupTransform('/wrist_board','/left_wrist',rospy.Time(0))
                    checkerboard_to_wrist_estimate = tf.transformations.toMatrix(tf.transformations.fromTF(checkerboard_to_wrist_tf))

                checkerboard_tf = listener.lookupTransform('/wrist_board','/camera_link',rospy.Time(0))
                checkerboard_in_camera_trans.append(tf.transformations.toMatrix(tf.transformations.fromTF(checkboard_tf)))
                wrist_in_body_tf = listener.lookupTransform('/left_wrist','/world',rospy.Time(0))
                wrist_in_body_trans.append(tf.transformations.toMatrix(tf.transformations.fromTF(wrist_in_body_tf)))

    return checkboard_in_camera_trans, wrist_in_body_trans, camera_in_body_estimate, checkerboard_to_wrist_estimate
                
                


def estimate_kinect_to_base(bag_file_name):

    checkboard_in_camera_trans, wrist_in_body_trans, camera_in_body_estimate, checkerboard_to_wrist_estimate = get_transform_lists(bag_file_name)

    parameters = numpy.hstack([checkerboard_to_wrist_estimate, camera_in_body_estimate])
    
    [params_estimate,fopt, direc, itr, funcals, warnflag, allvecs] = scipy.optimize.fmin_powell(get_total_error, parameters, args=(wrist_in_body_trans, checkerboard_in_camera_trans), xtol=0.0001, ftol=0.0001, maxiter=None, maxfun=None, full_output=0, disp=1, retall=0, callback=None, direc=None)
    return get_kinect_to_base_params(params_estimate)
